/*
 * This file is part of the Yildiz-Engine project, licenced under the MIT License  (MIT)
 *
 * Copyright (c) 2017 Gr√©gory Van den Borre
 *
 * More infos available: https://www.yildiz-games.be
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
 * documentation files (the "Software"), to deal in the Software without restriction, including without
 * limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
 * OR COPYRIGHT  HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  SOFTWARE.
 */

/**
 * This class is generated by jOOQ
 */
package be.yildiz.server.generated.database.tables;


import be.yildiz.server.generated.database.Keys;
import be.yildiz.server.generated.database.Yildizdatabase;
import be.yildiz.server.generated.database.tables.records.TaskBuildBuildingRecord;
import org.jooq.*;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;
import org.jooq.types.UInteger;
import org.jooq.types.UShort;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TaskBuildBuilding extends TableImpl<TaskBuildBuildingRecord> {

    private static final long serialVersionUID = -1559427543;

    /**
     * The reference instance of <code>yildizdatabase.task_build_building</code>
     */
    public static final TaskBuildBuilding TASK_BUILD_BUILDING = new TaskBuildBuilding();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TaskBuildBuildingRecord> getRecordType() {
        return TaskBuildBuildingRecord.class;
    }

    /**
     * The column <code>yildizdatabase.task_build_building.id</code>.
     */
    public final TableField<TaskBuildBuildingRecord, UInteger> ID = createField("id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGERUNSIGNED)), this, "");

    /**
     * The column <code>yildizdatabase.task_build_building.position</code>.
     */
    public final TableField<TaskBuildBuildingRecord, UByte> POSITION = createField("position", org.jooq.impl.SQLDataType.TINYINTUNSIGNED, this, "");

    /**
     * The column <code>yildizdatabase.task_build_building.type</code>.
     */
    public final TableField<TaskBuildBuildingRecord, UByte> TYPE = createField("type", org.jooq.impl.SQLDataType.TINYINTUNSIGNED, this, "");

    /**
     * The column <code>yildizdatabase.task_build_building.time_left</code>.
     */
    public final TableField<TaskBuildBuildingRecord, UInteger> TIME_LEFT = createField("time_left", org.jooq.impl.SQLDataType.INTEGERUNSIGNED, this, "");

    /**
     * The column <code>yildizdatabase.task_build_building.staff</code>.
     */
    public final TableField<TaskBuildBuildingRecord, UShort> STAFF = createField("staff", org.jooq.impl.SQLDataType.SMALLINTUNSIGNED, this, "");

    /**
     * The column <code>yildizdatabase.task_build_building.level</code>.
     */
    public final TableField<TaskBuildBuildingRecord, UByte> LEVEL = createField("level", org.jooq.impl.SQLDataType.TINYINTUNSIGNED, this, "");

    /**
     * Create a <code>yildizdatabase.task_build_building</code> table reference
     */
    public TaskBuildBuilding() {
        this("task_build_building", null);
    }

    /**
     * Create an aliased <code>yildizdatabase.task_build_building</code> table reference
     */
    public TaskBuildBuilding(String alias) {
        this(alias, TASK_BUILD_BUILDING);
    }

    private TaskBuildBuilding(String alias, Table<TaskBuildBuildingRecord> aliased) {
        this(alias, aliased, null);
    }

    private TaskBuildBuilding(String alias, Table<TaskBuildBuildingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Yildizdatabase.YILDIZDATABASE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TaskBuildBuildingRecord> getPrimaryKey() {
        return Keys.KEY_TASK_BUILD_BUILDING_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TaskBuildBuildingRecord>> getKeys() {
        return Arrays.<UniqueKey<TaskBuildBuildingRecord>>asList(Keys.KEY_TASK_BUILD_BUILDING_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TaskBuildBuilding as(String alias) {
        return new TaskBuildBuilding(alias, this);
    }

    /**
     * Rename this table
     */
    public TaskBuildBuilding rename(String name) {
        return new TaskBuildBuilding(name, null);
    }
}
