/*
 * This file is generated by jOOQ.
*/
package be.yildiz.server.generated.database.tables;


import be.yildiz.server.generated.database.Keys;
import be.yildiz.server.generated.database.Yildizdatabase;
import be.yildiz.server.generated.database.tables.records.CitiesRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Cities extends TableImpl<CitiesRecord> {

    private static final long serialVersionUID = -491687293;

    /**
     * The reference instance of <code>YILDIZDATABASE.CITIES</code>
     */
    public static final Cities CITIES = new Cities();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CitiesRecord> getRecordType() {
        return CitiesRecord.class;
    }

    /**
     * The column <code>YILDIZDATABASE.CITIES.ID</code>.
     */
    public final TableField<CitiesRecord, UInteger> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>YILDIZDATABASE.CITIES.NAME</code>.
     */
    public final TableField<CitiesRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * Create a <code>YILDIZDATABASE.CITIES</code> table reference
     */
    public Cities() {
        this("CITIES", null);
    }

    /**
     * Create an aliased <code>YILDIZDATABASE.CITIES</code> table reference
     */
    public Cities(String alias) {
        this(alias, CITIES);
    }

    private Cities(String alias, Table<CitiesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Cities(String alias, Table<CitiesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Yildizdatabase.YILDIZDATABASE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CitiesRecord> getPrimaryKey() {
        return Keys.KEY_CITIES_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CitiesRecord>> getKeys() {
        return Arrays.<UniqueKey<CitiesRecord>>asList(Keys.KEY_CITIES_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Cities as(String alias) {
        return new Cities(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Cities rename(String name) {
        return new Cities(name, null);
    }
}
