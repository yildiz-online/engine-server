/*
 * This file is generated by jOOQ.
*/
package be.yildiz.server.generated.database;


import be.yildiz.server.generated.database.tables.*;
import be.yildiz.server.generated.database.tables.records.*;
import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.AbstractKeys;
import org.jooq.types.UInteger;
import org.jooq.types.UShort;

import javax.annotation.Generated;


/**
 * A class modelling foreign key relationships between tables of the <code>YILDIZDATABASE</code> 
 * schema
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<BuildingsRecord, UInteger> IDENTITY_BUILDINGS = Identities0.IDENTITY_BUILDINGS;
    public static final Identity<CitiesRecord, UInteger> IDENTITY_CITIES = Identities0.IDENTITY_CITIES;
    public static final Identity<EntitiesRecord, UInteger> IDENTITY_ENTITIES = Identities0.IDENTITY_ENTITIES;
    public static final Identity<MessagesRecord, UInteger> IDENTITY_MESSAGES = Identities0.IDENTITY_MESSAGES;
    public static final Identity<PlayersRecord, UShort> IDENTITY_PLAYERS = Identities0.IDENTITY_PLAYERS;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<BuildingsRecord> KEY_BUILDINGS_PRIMARY = UniqueKeys0.KEY_BUILDINGS_PRIMARY;
    public static final UniqueKey<CitiesRecord> KEY_CITIES_PRIMARY = UniqueKeys0.KEY_CITIES_PRIMARY;
    public static final UniqueKey<EntitiesRecord> KEY_ENTITIES_PRIMARY = UniqueKeys0.KEY_ENTITIES_PRIMARY;
    public static final UniqueKey<MessagesRecord> KEY_MESSAGES_PRIMARY = UniqueKeys0.KEY_MESSAGES_PRIMARY;
    public static final UniqueKey<PlayersRecord> KEY_PLAYERS_PRIMARY = UniqueKeys0.KEY_PLAYERS_PRIMARY;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------


    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 extends AbstractKeys {
        public static Identity<BuildingsRecord, UInteger> IDENTITY_BUILDINGS = createIdentity(Buildings.BUILDINGS, Buildings.BUILDINGS.BLD_ID);
        public static Identity<CitiesRecord, UInteger> IDENTITY_CITIES = createIdentity(Cities.CITIES, Cities.CITIES.CIT_ID);
        public static Identity<EntitiesRecord, UInteger> IDENTITY_ENTITIES = createIdentity(Entities.ENTITIES, Entities.ENTITIES.ENT_ID);
        public static Identity<MessagesRecord, UInteger> IDENTITY_MESSAGES = createIdentity(Messages.MESSAGES, Messages.MESSAGES.MSG_ID);
        public static Identity<PlayersRecord, UShort> IDENTITY_PLAYERS = createIdentity(Players.PLAYERS, Players.PLAYERS.PLY_ID);
    }

    private static class UniqueKeys0 extends AbstractKeys {
        public static final UniqueKey<BuildingsRecord> KEY_BUILDINGS_PRIMARY = createUniqueKey(Buildings.BUILDINGS, "KEY_BUILDINGS_PRIMARY", Buildings.BUILDINGS.BLD_ID);
        public static final UniqueKey<CitiesRecord> KEY_CITIES_PRIMARY = createUniqueKey(Cities.CITIES, "KEY_CITIES_PRIMARY", Cities.CITIES.CIT_ID);
        public static final UniqueKey<EntitiesRecord> KEY_ENTITIES_PRIMARY = createUniqueKey(Entities.ENTITIES, "KEY_ENTITIES_PRIMARY", Entities.ENTITIES.ENT_ID);
        public static final UniqueKey<MessagesRecord> KEY_MESSAGES_PRIMARY = createUniqueKey(Messages.MESSAGES, "KEY_MESSAGES_PRIMARY", Messages.MESSAGES.MSG_ID);
        public static final UniqueKey<PlayersRecord> KEY_PLAYERS_PRIMARY = createUniqueKey(Players.PLAYERS, "KEY_PLAYERS_PRIMARY", Players.PLAYERS.PLY_ID);
    }
}
