/**
 * This class is generated by jOOQ
 */
package be.yildiz.server.generated.database.tables.records;


import be.yildiz.server.generated.database.tables.Account;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record9;
import org.jooq.Row9;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UByte;
import org.jooq.types.UShort;

import javax.annotation.Generated;
import java.sql.Timestamp;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountRecord extends UpdatableRecordImpl<AccountRecord> implements Record9<UShort, String, String, UByte, Boolean, UByte, Boolean, String, Timestamp> {

	private static final long serialVersionUID = 954926826;

	/**
	 * Setter for <code>yildizdatabase.account.id</code>.
	 */
	public void setId(UShort value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>yildizdatabase.account.id</code>.
	 */
	public UShort getId() {
		return (UShort) getValue(0);
	}

	/**
	 * Setter for <code>yildizdatabase.account.username</code>.
	 */
	public void setUsername(String value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>yildizdatabase.account.username</code>.
	 */
	public String getUsername() {
		return (String) getValue(1);
	}

	/**
	 * Setter for <code>yildizdatabase.account.password</code>.
	 */
	public void setPassword(String value) {
		setValue(2, value);
	}

	/**
	 * Getter for <code>yildizdatabase.account.password</code>.
	 */
	public String getPassword() {
		return (String) getValue(2);
	}

	/**
	 * Setter for <code>yildizdatabase.account.type</code>. 0 for regular player, 1 for GM, 2 for admin, 3 for webapp
	 */
	public void setType(UByte value) {
		setValue(3, value);
	}

	/**
	 * Getter for <code>yildizdatabase.account.type</code>. 0 for regular player, 1 for GM, 2 for admin, 3 for webapp
	 */
	public UByte getType() {
		return (UByte) getValue(3);
	}

	/**
	 * Setter for <code>yildizdatabase.account.online</code>.
	 */
	public void setOnline(Boolean value) {
		setValue(4, value);
	}

	/**
	 * Getter for <code>yildizdatabase.account.online</code>.
	 */
	public Boolean getOnline() {
		return (Boolean) getValue(4);
	}

	/**
	 * Setter for <code>yildizdatabase.account.map</code>.
	 */
	public void setMap(UByte value) {
		setValue(5, value);
	}

	/**
	 * Getter for <code>yildizdatabase.account.map</code>.
	 */
	public UByte getMap() {
		return (UByte) getValue(5);
	}

	/**
	 * Setter for <code>yildizdatabase.account.active</code>. 0 if the player is deleted, 1 if exist in game
	 */
	public void setActive(Boolean value) {
		setValue(6, value);
	}

	/**
	 * Getter for <code>yildizdatabase.account.active</code>. 0 if the player is deleted, 1 if exist in game
	 */
	public Boolean getActive() {
		return (Boolean) getValue(6);
	}

	/**
	 * Setter for <code>yildizdatabase.account.email</code>.
	 */
	public void setEmail(String value) {
		setValue(7, value);
	}

	/**
	 * Getter for <code>yildizdatabase.account.email</code>.
	 */
	public String getEmail() {
		return (String) getValue(7);
	}

	/**
	 * Setter for <code>yildizdatabase.account.last_connection</code>.
	 */
	public void setLastConnection(Timestamp value) {
		setValue(8, value);
	}

	/**
	 * Getter for <code>yildizdatabase.account.last_connection</code>.
	 */
	public Timestamp getLastConnection() {
		return (Timestamp) getValue(8);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<UShort> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record9 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row9<UShort, String, String, UByte, Boolean, UByte, Boolean, String, Timestamp> fieldsRow() {
		return (Row9) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row9<UShort, String, String, UByte, Boolean, UByte, Boolean, String, Timestamp> valuesRow() {
		return (Row9) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<UShort> field1() {
		return Account.ACCOUNT.ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field2() {
		return Account.ACCOUNT.USERNAME;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field3() {
		return Account.ACCOUNT.PASSWORD;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<UByte> field4() {
		return Account.ACCOUNT.TYPE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Boolean> field5() {
		return Account.ACCOUNT.ONLINE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<UByte> field6() {
		return Account.ACCOUNT.MAP;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Boolean> field7() {
		return Account.ACCOUNT.ACTIVE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field8() {
		return Account.ACCOUNT.EMAIL;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Timestamp> field9() {
		return Account.ACCOUNT.LAST_CONNECTION;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UShort value1() {
		return getId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value2() {
		return getUsername();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value3() {
		return getPassword();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UByte value4() {
		return getType();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Boolean value5() {
		return getOnline();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UByte value6() {
		return getMap();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Boolean value7() {
		return getActive();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value8() {
		return getEmail();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Timestamp value9() {
		return getLastConnection();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AccountRecord value1(UShort value) {
		setId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AccountRecord value2(String value) {
		setUsername(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AccountRecord value3(String value) {
		setPassword(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AccountRecord value4(UByte value) {
		setType(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AccountRecord value5(Boolean value) {
		setOnline(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AccountRecord value6(UByte value) {
		setMap(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AccountRecord value7(Boolean value) {
		setActive(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AccountRecord value8(String value) {
		setEmail(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AccountRecord value9(Timestamp value) {
		setLastConnection(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AccountRecord values(UShort value1, String value2, String value3, UByte value4, Boolean value5, UByte value6, Boolean value7, String value8, Timestamp value9) {
		value1(value1);
		value2(value2);
		value3(value3);
		value4(value4);
		value5(value5);
		value6(value6);
		value7(value7);
		value8(value8);
		value9(value9);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached AccountRecord
	 */
	public AccountRecord() {
		super(Account.ACCOUNT);
	}

	/**
	 * Create a detached, initialised AccountRecord
	 */
	public AccountRecord(UShort id, String username, String password, UByte type, Boolean online, UByte map, Boolean active, String email, Timestamp lastConnection) {
		super(Account.ACCOUNT);

		setValue(0, id);
		setValue(1, username);
		setValue(2, password);
		setValue(3, type);
		setValue(4, online);
		setValue(5, map);
		setValue(6, active);
		setValue(7, email);
		setValue(8, lastConnection);
	}
}
