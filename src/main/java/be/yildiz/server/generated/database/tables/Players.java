/*
 * This file is generated by jOOQ.
*/
package be.yildiz.server.generated.database.tables;


import be.yildiz.server.generated.database.Keys;
import be.yildiz.server.generated.database.Yildizdatabase;
import be.yildiz.server.generated.database.tables.records.PlayersRecord;
import org.jooq.*;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;
import org.jooq.types.UShort;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Players extends TableImpl<PlayersRecord> {

    private static final long serialVersionUID = 87142615;

    /**
     * The reference instance of <code>YILDIZDATABASE.PLAYERS</code>
     */
    public static final Players PLAYERS = new Players();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlayersRecord> getRecordType() {
        return PlayersRecord.class;
    }

    /**
     * The column <code>YILDIZDATABASE.PLAYERS.PLY_ID</code>.
     */
    public final TableField<PlayersRecord, UShort> PLY_ID = createField("PLY_ID", org.jooq.impl.SQLDataType.SMALLINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>YILDIZDATABASE.PLAYERS.ACC_ID</code>.
     */
    public final TableField<PlayersRecord, UShort> ACC_ID = createField("ACC_ID", org.jooq.impl.SQLDataType.SMALLINTUNSIGNED, this, "");

    /**
     * The column <code>YILDIZDATABASE.PLAYERS.ACTIVE</code>.
     */
    public final TableField<PlayersRecord, Boolean> ACTIVE = createField("ACTIVE", org.jooq.impl.SQLDataType.BIT.defaultValue(org.jooq.impl.DSL.inline("b'0'", org.jooq.impl.SQLDataType.BIT)), this, "");

    /**
     * The column <code>YILDIZDATABASE.PLAYERS.ONLINE</code>.
     */
    public final TableField<PlayersRecord, Boolean> ONLINE = createField("ONLINE", org.jooq.impl.SQLDataType.BIT.defaultValue(org.jooq.impl.DSL.inline("b'0'", org.jooq.impl.SQLDataType.BIT)), this, "");

    /**
     * The column <code>YILDIZDATABASE.PLAYERS.ROLE</code>.
     */
    public final TableField<PlayersRecord, UByte> ROLE = createField("ROLE", org.jooq.impl.SQLDataType.TINYINTUNSIGNED.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINTUNSIGNED)), this, "");

    /**
     * The column <code>YILDIZDATABASE.PLAYERS.NAME</code>.
     */
    public final TableField<PlayersRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * Create a <code>YILDIZDATABASE.PLAYERS</code> table reference
     */
    public Players() {
        this("PLAYERS", null);
    }

    /**
     * Create an aliased <code>YILDIZDATABASE.PLAYERS</code> table reference
     */
    public Players(String alias) {
        this(alias, PLAYERS);
    }

    private Players(String alias, Table<PlayersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Players(String alias, Table<PlayersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Yildizdatabase.YILDIZDATABASE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PlayersRecord, UShort> getIdentity() {
        return Keys.IDENTITY_PLAYERS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PlayersRecord> getPrimaryKey() {
        return Keys.KEY_PLAYERS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PlayersRecord>> getKeys() {
        return Arrays.<UniqueKey<PlayersRecord>>asList(Keys.KEY_PLAYERS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Players as(String alias) {
        return new Players(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Players rename(String name) {
        return new Players(name, null);
    }
}
